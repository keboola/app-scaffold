[
    {
        "configuration": {
            "output": [
                {
                    "primaryKey": [
                        "organization_id"
                    ],
                    "source": "out_organization",
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketOrganization"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketOrganization"
                }
            ],
            "queries": [
                "--create output organization table\nCREATE TABLE \"out_organization\"\nAS\n    SELECT\n        \"team_id\"      AS \"organization_id\",\n        \"display_name\" AS \"organization\"\n    FROM \"team\";",
                "--add fake row for referential integrity (users without team)\nINSERT INTO \"out_organization\"\n    (\"organization_id\", \"organization\")\nVALUES\n    ('0', 'Unknown');"
            ],
            "input": [
                {
                    "destination": "team",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketTeam"
                    }
                }
            ],
            "name": "Organization",
            "packages": [],
            "requires": [],
            "backend": "snowflake",
            "type": "simple",
            "id": "545726452",
            "phase": 1,
            "disabled": false,
            "description": ""
        },
        "description": "",
        "name": "Organization"
    },
    {
        "configuration": {
            "output": [
                {
                    "source": "out_user",
                    "primaryKey": [
                        "user_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketUser"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketUser"
                },
                {
                    "source": "out_organization_user",
                    "primaryKey": [
                        "organization_id",
                        "user_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketOrganizationUser"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketOrganizationUser"
                }
            ],
            "queries": [
                "--create output users table\n--format date\n--convert flags to true\/false\nCREATE TABLE \"out_user\"\nAS\n    SELECT\n        \"m\".\"member_id\"                                       AS \"user_id\",\n        \"m\".\"display_name\"                                    AS \"user\",\n        replace(left(\"created_on\", 19), 'T', ' ')             AS \"created_on\",\n        \"m\".\"type\",\n        IFF(\"m\".\"account_status\" = 'active', 'true', 'false') AS \"is_active\"\n    FROM \"member\" \"m\";",
                "--add fake row for referential integrity (pull requests\/commits\/issues\/comments without user)\nINSERT INTO \"out_user\"\n    (\"user_id\", \"user\", \"created_on\", \"type\", \"is_active\")\nVALUES\n    ('0', 'External User', '', 'user', 'false');",
                "--create user-organization membership table\n--link member to Unknown org if that mentioned in the data is missing\nCREATE TABLE \"out_organization_user\"\nAS\n    SELECT\n        ifnull(\"o\".\"organization_id\", '0') AS \"organization_id\",\n        \"m\".\"member_id\"                           AS \"user_id\"\n    FROM \"member\" \"m\"\n             LEFT JOIN \"organization\" \"o\"\n                       ON \"m\".\"team_id\" = \"o\".\"organization_id\";"
            ],
            "input": [
                {
                    "destination": "member",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketMember"
                    }
                },
                {
                    "destination": "organization",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source": "out.c-bitbucketDevops.bitbucketOrganization"
                }
            ],
            "name": "User",
            "packages": [],
            "requires": [],
            "backend": "snowflake",
            "type": "simple",
            "id": "545729143",
            "phase": "2",
            "disabled": false,
            "description": ""
        },
        "description": "",
        "name": "User"
    },
    {
        "configuration": {
            "output": [
                {
                    "primaryKey": [
                        "repository_id"
                    ],
                    "source": "out_repository",
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketRepository"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketRepository"
                },
                {
                    "source": "out_pull_request",
                    "primaryKey": [
                        "pull_request_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketPullRequest"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketPullRequest"
                },
                {
                    "source": "out_pull_request_activity",
                    "primaryKey": [
                        "pull_request_activity_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketPullRequestActivity"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketPullRequestActivity"
                },
                {
                    "source": "out_repository_commit",
                    "primaryKey": [
                        "repository_commit_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketRepositoryCommit"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketRepositoryCommit"
                },
                {
                    "source": "out_repository_commit_change",
                    "primaryKey": [
                        "repository_commit_change_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketRepositoryCommitChange"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketRepositoryCommitChange"
                },
                {
                    "source": "out_issue",
                    "primaryKey": [
                        "issue_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketIssue"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketIssue"
                },
                {
                    "source": "out_issue_comment",
                    "primaryKey": [
                        "issue_comment_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketIssueComment"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketIssueComment"
                },
                {
                    "source": "out_event",
                    "primaryKey": [
                        "event_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "BitbucketDevops.internal.outBitbucketEvent"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "BitbucketDevops"
                        }
                    ],
                    "destination": "out.c-bitbucketDevops.bitbucketEvent"
                }
            ],
            "queries": [
                "--create output repository table\n--change flags to true\/false\n--format date\n--mark Looker repositories based on changed files\nCREATE TABLE \"out_repository\"\nAS\n    SELECT\n        \"r\".\"repository_id\"                                 AS \"repository_id\",\n        \"r\".\"name\"                                          AS \"repository\",\n        \"p\".\"name\"                                          AS \"project\",\n        iff(length(\"r\".\"description\") > 1024, left(\"r\".\"description\", 1021) || '...',\n            \"r\".\"description\")                              AS \"description\",\n        iff(\"r\".\"language\" = '', 'unknown', \"r\".\"language\") AS \"language\",\n        iff(\"r\".\"has_wiki\" = '1', 'true', 'false')          AS \"has_wiki\",\n        iff(\"r\".\"has_issues\" = '1', 'true', 'false')        AS \"has_issues\",\n        iff(\"r\".\"is_private\" = '1', 'true', 'false')        AS \"is_private\",\n        iff(\"l\".\"repository_id\" IS NULL, 'false', 'true')   AS \"is_looker\",\n        replace(left(\"r\".\"created_on\", 19), 'T', ' ')       AS \"created_on\",\n        \"r\".\"html_url\"                                      AS \"url\"\n    FROM \"repository\" \"r\"\n             LEFT JOIN \"project\" \"p\"\n                       ON \"r\".\"project_id\" = \"p\".\"project_id\"\n             LEFT JOIN (SELECT DISTINCT\n                            \"repository_id\"\n                        FROM \"repository_commit_change\" \"rcc\"\n                                 LEFT JOIN \"repository_commit\" \"rc\"\n                                           ON \"rcc\".\"repository_commit_id\" = \"rc\".\"repository_commit_id\"\n                        WHERE split_part(\"new_path\", '\\.', -1) = 'lkml') \"l\"\n                       ON \"r\".\"repository_id\" = \"l\".\"repository_id\";",
                "--deduplicate pull requests and activity\n--data are extracted incrementally and same pull requests and activities might be in more tables\nCREATE TABLE \"pull_request_union\"\nAS\n    SELECT *\n    FROM \"pull_request_declined\"\n    UNION\n    SELECT *\n    FROM \"pull_request_merged\"\n    UNION\n    SELECT *\n    FROM \"pull_request_open\";",
                "--format columns\n--second dedupe\n--referential integrity check\nCREATE TABLE \"out_pull_request\"\nAS\n    SELECT\n        \"p\".\"repository_id\" || '_' || \"p\".\"pull_request_id\" AS \"pull_request_id\",\n        \"r\".\"repository_id\",\n        ifnull(\"u\".\"user_id\", '0')                          AS \"user_id\",\n        \"p\".\"title\",\n        iff(length(\"p\".\"description\") > 1024, left(\"p\".\"description\", 1021) || '...',\n            \"p\".\"description\")                              AS \"description\",\n        \"p\".\"state\",\n        replace(left(\"p\".\"created_on\", 19), 'T', ' ')       AS \"created_on\",\n        replace(left(\"p\".\"updated_on\", 19), 'T', ' ')       AS \"updated_on\",\n        \"p\".\"html_url\"                                      AS \"url\"\n    FROM \"pull_request_union\" \"p\"\n             INNER JOIN (SELECT\n                             \"pull_request_id\",\n                             \"repository_id\",\n                             max(\"updated_on\") AS \"max_update_on\"\n                         FROM \"pull_request_union\"\n                         GROUP BY 1, 2) \"m\"\n                        ON \"p\".\"pull_request_id\" = \"m\".\"pull_request_id\"\n                            AND \"p\".\"repository_id\" = \"m\".\"repository_id\"\n                            AND \"p\".\"updated_on\" = \"m\".\"max_update_on\"\n             INNER JOIN \"out_repository\" \"r\"\n                        ON \"p\".\"repository_id\" = \"r\".\"repository_id\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"p\".\"author_id\" = \"u\".\"user_id\";",
                "--easy deduplication of activity (there is no state which can change during time)\n--format columns\nCREATE TABLE \"out_pull_request_activity\"\nAS\n    SELECT DISTINCT\n            \"a\".\"repository_id\" || '_' || \"a\".\"pull_request_id\" || '_' || \"a\".\"state\" || '_' ||\n            left(\"a\".\"date\", 19)                    AS \"pull_request_activity_id\",\n            \"p\".\"pull_request_id\",\n            ifnull(\"u\".\"user_id\", '0')              AS \"user_id\",\n            ifnull(\"u\".\"user\", 'External User')     AS \"user\",\n            replace(left(\"a\".\"date\", 19), 'T', ' ') AS \"date\",\n            \"a\".\"state\",\n            \"a\".\"title\",\n            iff(length(\"a\".\"description\") > 1024, left(\"a\".\"description\", 1021) || '...',\n                \"a\".\"description\")                  AS \"description\",\n            \"a\".\"reason\"\n    FROM (SELECT *\n          FROM \"pull_request_declined_activity\"\n          UNION\n          SELECT *\n          FROM \"pull_request_merged_activity\"\n          UNION\n          SELECT *\n          FROM \"pull_request_open_activity\") \"a\"\n             INNER JOIN \"out_pull_request\" \"p\"\n                        ON \"a\".\"repository_id\" || '_' || \"a\".\"pull_request_id\" = \"p\".\"pull_request_id\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"a\".\"author_id\" = \"u\".\"user_id\"\n    WHERE \"a\".\"state\" <> '';",
                "--create output commits table\nCREATE TABLE \"out_repository_commit\"\nAS\n    SELECT\n        \"c\".\"repository_commit_id\",\n        \"r\".\"repository_id\",\n        ifnull(\"u\".\"user_id\", '0')                                                           AS \"user_id\",\n        replace(left(\"c\".\"date\", 19), 'T', ' ')                                              AS \"date\",\n        \"c\".\"html_url\"                                                                       AS \"url\",\n        iff(length(\"c\".\"message\") > 1024, left(\"c\".\"message\", 1021) || '...', \"c\".\"message\") AS \"message\"\n    FROM \"repository_commit\" \"c\"\n             INNER JOIN \"out_repository\" \"r\"\n                        ON \"c\".\"repository_id\" = \"r\".\"repository_id\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"c\".\"author_id\" = \"u\".\"user_id\";",
                "--create output commit file changes table\nCREATE TABLE \"out_repository_commit_change\"\nAS\n    SELECT\n        md5(\"c\".\"repository_commit_id\" || '_' || \"c\".\"status\" || '_' ||\n            \"c\".\"new_path\")                       AS \"repository_commit_change_id\",\n        \"orc\".\"repository_commit_id\",\n        \"c\".\"status\",\n        \"c\".\"new_path\",\n        iff(split_part(\"c\".\"new_path\", '\\.', -1) IN ('lkml', 'lookml', 'md'), split_part(\"c\".\"new_path\", '\\.', -2),\n            split_part(\"c\".\"new_path\", '\\.', -1)) AS \"file_type\",\n        --\"c\".\"new_type\",\n        \"c\".\"old_path\",\n        --\"c\".\"old_type\",\n        \"c\".\"lines_added\",\n        \"c\".\"lines_removed\"\n    FROM \"repository_commit_change\" \"c\"\n             INNER JOIN \"out_repository_commit\" \"orc\"\n                        ON \"c\".\"repository_commit_id\" = \"orc\".\"repository_commit_id\";",
                "--create output issues table\nCREATE TABLE \"out_issue\"\nAS\n    SELECT\n        \"i\".\"repository_id\" || '_' || \"i\".\"issue_id\"                                AS \"issue_id\",\n        \"r\".\"repository_id\"                                                         AS \"repository_id\",\n        ifnull(\"u\".\"user_id\", '0')                                                  AS \"user_id\",\n        \"i\".\"reporter\"                                                              AS \"reporter\",\n        \"i\".\"issue_id\"                                                              AS \"number\",\n        \"i\".\"title\",\n        IFF(LENGTH(\"i\".\"text\") > 1024, LEFT(\"i\".\"text\", 1021) || '...', \"i\".\"text\") AS \"description\",\n        \"i\".\"state\",\n        \"i\".\"priority\",\n        \"i\".\"kind\",\n        replace(left(\"i\".\"created_on\", 19), 'T', ' ')                               AS \"created_on\",\n        replace(left(\"i\".\"updated_on\", 19), 'T', ' ')                               AS \"updated_on\",\n        \"i\".\"html_url\"                                                              AS \"url\"\n    FROM \"issue\" \"i\"\n             INNER JOIN \"out_repository\" \"r\"\n                        ON \"i\".\"repository_id\" = \"r\".\"repository_id\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"i\".\"assignee_id\" = \"u\".\"user_id\";",
                "--create output issue comments table\n--bit confusing join, but we can't forget we've created single PK of issues by combining multiple PK columns\nCREATE TABLE \"out_issue_comment\"\nAS\n    SELECT\n        \"c\".\"issue_comment_id\",\n        \"i\".\"issue_id\",\n        ifnull(\"u\".\"user_id\", '0')                                                  AS \"user_id\",\n        ifnull(\"u\".\"user\", 'External User')                                         AS \"user\",\n        IFF(LENGTH(\"c\".\"text\") > 1024, LEFT(\"c\".\"text\", 1021) || '...', \"c\".\"text\") AS \"description\",\n        replace(left(\"i\".\"created_on\", 19), 'T', ' ')                               AS \"created_on\",\n        replace(left(\"i\".\"updated_on\", 19), 'T', ' ')                               AS \"updated_on\",\n        \"c\".\"html_url\"                                                              AS \"url\"\n    FROM \"issue_comment\" \"c\"\n             INNER JOIN \"out_issue\" \"i\"\n                        ON \"c\".\"repository_id\" || '_' || \"c\".\"issue_id\" = \"i\".\"issue_id\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"c\".\"user_id\" = \"u\".\"user_id\";",
                "--creating output events table from previously created tables, so it's possible to measure user's overall activity\nCREATE TABLE \"out_event\"\nAS\n    SELECT\n        \"pull_request_id\" || '_prc' AS \"event_id\",\n        \"repository_id\",\n        \"user_id\",\n        'Pull Request Created'      AS \"event\",\n        \"created_on\"                AS \"date\",\n        \"url\"\n    FROM \"out_pull_request\"\n    WHERE \"created_on\" <> ''\n    UNION ALL\n    SELECT\n        \"a\".\"pull_request_activity_id\" || '_pra' AS \"event_id\",\n        \"r\".\"repository_id\",\n        \"a\".\"user_id\",\n        'Pull Request ' || initcap(\"a\".\"state\")  AS \"event\",\n        \"a\".\"date\"                               AS \"date\",\n        ''                                       AS \"url\"\n    FROM \"out_pull_request_activity\" \"a\"\n             LEFT JOIN \"out_pull_request\" \"r\"\n                       ON \"a\".\"pull_request_id\" = \"r\".\"pull_request_id\"\n    WHERE \"a\".\"date\" <> ''\n    UNION ALL\n    SELECT\n        \"repository_commit_id\" || '_c' AS \"event_id\",\n        \"repository_id\",\n        \"user_id\",\n        'Commit'                       AS \"event\",\n        \"date\"                         AS \"date\",\n        \"url\"\n    FROM \"out_repository_commit\"\n    WHERE \"date\" <> ''\n    UNION ALL\n    SELECT\n        \"issue_id\" || '_icr' AS \"event_id\",\n        \"repository_id\",\n        \"user_id\",\n        'Issue Created'      AS \"event\",\n        \"created_on\"         AS \"date\",\n        \"url\"\n    FROM \"out_issue\"\n    WHERE \"created_on\" <> ''\n    UNION ALL\n    SELECT\n        \"c\".\"issue_comment_id\" || '_ico' AS \"event_id\",\n        \"i\".\"repository_id\",\n        \"c\".\"user_id\",\n        'Issue Comment'                  AS \"event\",\n        \"c\".\"created_on\"                 AS \"date\",\n        \"c\".\"url\"\n    FROM \"out_issue_comment\" \"c\"\n             LEFT JOIN \"out_issue\" \"i\"\n                       ON \"c\".\"issue_id\" = \"i\".\"issue_id\"\n    WHERE \"c\".\"created_on\" <> '';"
            ],
            "input": [
                {
                    "destination": "issue",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketIssue"
                    }
                },
                {
                    "destination": "issue_comment",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketIssueComment"
                    }
                },
                {
                    "destination": "repository_commit",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketRepositoryCommit"
                    }
                },
                {
                    "destination": "repository_commit_change",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketRepositoryCommitChange"
                    }
                },
                {
                    "destination": "pull_request_declined",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketPullRequestDeclined"
                    }
                },
                {
                    "destination": "pull_request_declined_activity",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketPullRequestDeclinedActivity"
                    }
                },
                {
                    "destination": "pull_request_merged",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketPullRequestMerged"
                    }
                },
                {
                    "destination": "pull_request_merged_activity",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketPullRequestMergedActivity"
                    }
                },
                {
                    "destination": "pull_request_open",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketPullRequestOpen"
                    }
                },
                {
                    "destination": "pull_request_open_activity",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketPullRequestOpenActivity"
                    }
                },
                {
                    "destination": "user",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source": "out.c-bitbucketDevops.bitbucketUser"
                },
                {
                    "destination": "repository",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketRepository"
                    }
                },
                {
                    "destination": "project",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "BitbucketDevops.internal.inKdsTeamExBitbucketProject"
                    }
                }
            ],
            "name": "Repository, Pulls, Commits, Issues, Events",
            "packages": [],
            "requires": [],
            "backend": "snowflake",
            "type": "simple",
            "id": "545739069",
            "phase": "3",
            "disabled": false,
            "description": ""
        },
        "description": "",
        "name": "Repository, Pulls, Commits, Issues, Events"
    }
]