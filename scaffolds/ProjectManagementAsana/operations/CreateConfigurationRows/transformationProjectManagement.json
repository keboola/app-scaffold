[
    {
        "configuration": {
            "output": [
                {
                    "source": "out_project",
                    "primaryKey": [
                        "project_id"
                    ],
                    "incremental": true,
                    "deleteWhereColumn": "",
                    "deleteWhereOperator": "eq",
                    "deleteWhereValues": [],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementProject"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementProject"
                },
                {
                    "source": "out_user",
                    "primaryKey": [
                        "user_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementUser"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementUser"
                },
                {
                    "source": "out_project_user",
                    "primaryKey": [
                        "user_id",
                        "project_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementProjectUser"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementProjectUser"
                },
                {
                    "source": "out_project_snapshot",
                    "incremental": true,
                    "deleteWhereColumn": "",
                    "deleteWhereOperator": "eq",
                    "deleteWhereValues": [],
                    "primaryKey": [
                        "project_id",
                        "snapshot_date"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outAuxiliaryTablesProjectSnapshot"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.auxiliaryTablesProjectSnapshot"
                }
            ],
            "queries": [
                "-- create base users table\n-- get email domain from email\n-- identify employees by the domain - CHANGE ACCORDINGLY!!!\nCREATE TABLE \"out_user\"\nAS\n    SELECT\n        \"id\"                                                            AS \"user_id\",\n        \"name\"                                                          AS \"user\",\n        \"email\",\n        split_part(\"email\", '@', 2)                                     AS \"email_domain\",\n        iff(\"email_domain\" LIKE '%keboola.com', 'employee', 'external') AS \"user_type\"\n    FROM \"users_details\";",
                "INSERT INTO \"out_user\"\n    (\"user_id\", \"user\")\nVALUES\n    ('0', 'Unknown');",
                "-- creating output table with projects\n-- date to simple format\n-- add workspace name to the projects\n-- change boolean values to true\/false\nCREATE TABLE \"out_project\"\nAS\n    SELECT\n        \"p\".\"id\"                                           AS \"project_id\",\n        \"p\".\"name\"                                         AS \"project\",\n        replace(left(\"pd\".\"created_at\", 19), 'T', ' ')     AS \"created_at\",\n        \"pd\".\"due_date\"                                    AS \"due_date\",\n        \"w\".\"name\"                                         AS \"workspace\",\n        'https:\/\/app.asana.com\/0\/' || \"p\".\"id\" || '\/board' AS \"url\",\n        ifnull(\"u\".\"user\", 'Unknown')                      AS \"owner\",\n        \"u\".\"user_type\"                                    AS \"owner_type\",\n        \"pd\".\"current_status_color\"                        AS \"status\",\n        iff(length(\"pd\".\"current_status_text\") > 1024, left(\"pd\".\"current_status_text\", 1021) || '...',\n            \"pd\".\"current_status_text\")                    AS \"status_text\",\n        iff(\"pd\".\"archived\" = '1', 'true', 'false')        AS \"archived\",\n        iff(\"pd\".\"public\" = '1', 'true', 'false')          AS \"public\"\n    FROM \"projects\" \"p\"\n             LEFT JOIN \"workspaces\" \"w\"\n                       ON \"p\".\"parent_id\" = \"w\".\"id\"\n             LEFT JOIN \"projects_details\" \"pd\"\n                       ON \"p\".\"id\" = \"pd\".\"id\"\n             LEFT JOIN \"out_user\" \"u\"\n                       ON \"pd\".\"owner_id\" = \"u\".\"user_id\";",
                "-- create N:M relation table describing user membership in projects\nCREATE TABLE \"out_project_user\"\nAS\n    SELECT\n        ifnull(\"u\".\"user_id\", '0') AS \"user_id\",\n        \"op\".\"project_id\"\n    FROM \"projects_members\" \"pm\"\n             INNER JOIN \"out_project\" \"op\"\n                        ON \"pm\".\"projects_details_pk\" = \"op\".\"project_id\"\n             LEFT JOIN \"out_user\" \"u\"\n                       ON \"pm\".\"id\" = \"u\".\"user_id\";",
                "-- snapshot project table to be able to track progress in time\n-- this table is an auxiliary table which will be used for creating final snapshot table later on\n-- set timezone to UTC (change accordingly)\nALTER SESSION\n    SET TIMEZONE = 'UTC';",
                "CREATE TABLE \"out_project_snapshot\"\nAS\n    SELECT\n        current_date :: STRING AS \"snapshot_date\",\n        \"op\".*\n    FROM \"out_project\" \"op\";"
            ],
            "input": [
                {
                    "destination": "workspaces",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaWorkspaces"
                    }
                },
                {
                    "destination": "projects",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaProjects"
                    }
                },
                {
                    "destination": "projects_details",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaProjectsDetails"
                    }
                },
                {
                    "destination": "projects_members",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaProjectsMembers"
                    }
                },
                {
                    "destination": "users_details",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaUsersDetails"
                    }
                }
            ],
            "name": "User, Workspace & Project",
            "packages": [],
            "requires": [],
            "backend": "snowflake",
            "type": "simple",
            "phase": 1,
            "disabled": false
        },
        "description": "",
        "name": "User, Workspace & Project"
    },
    {
        "configuration": {
            "output": [
                {
                    "source": "out_task",
                    "incremental": true,
                    "deleteWhereColumn": "",
                    "deleteWhereOperator": "eq",
                    "deleteWhereValues": [],
                    "primaryKey": [
                        "task_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementTask"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementTask"
                },
                {
                    "source": "out_task_tag",
                    "primaryKey": [
                        "task_id",
                        "tag"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementTaskTag"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementTaskTag"
                },
                {
                    "source": "out_task_user",
                    "primaryKey": [
                        "user_id",
                        "task_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementTaskUser"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementTaskUser"
                },
                {
                    "primaryKey": [
                        "task_id",
                        "snapshot_date"
                    ],
                    "incremental": true,
                    "deleteWhereColumn": "",
                    "deleteWhereOperator": "eq",
                    "deleteWhereValues": [],
                    "source": "out_task_snapshot",
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outAuxiliaryTablesTaskSnapshot"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.auxiliaryTablesTaskSnapshot"
                },
                {
                    "source": "out_task_event",
                    "primaryKey": [
                        "task_event_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementTaskEvent"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementTaskEvent"
                },
                {
                    "source": "out_task_custom_field",
                    "primaryKey": [
                        "task_custom_field_id"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementTaskCustomField"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementTaskCustomField"
                }
            ],
            "queries": [
                "-- creating output table with tasks\n-- date to simple format\n-- change boolean values to true\/false\n-- add section from membership table\nCREATE TABLE \"out_task\"\nAS\n    SELECT DISTINCT\n        \"t\".\"id\"                                                                                  AS \"task_id\",\n        iff(length(\"t\".\"name\") > 1024, left(\"t\".\"name\", 1021) || '...', \"t\".\"name\")               AS \"task\",\n        ifnull(\"tdm\".\"section_name\", '(no section)')                                              AS \"section\",\n        \"p\".\"project_id\"                                                                          AS \"project_id\",\n        replace(left(\"td\".\"created_at\", 19), 'T', ' ')                                            AS \"created_at\",\n        replace(left(\"td\".\"completed_at\", 19), 'T', ' ')                                          AS \"completed_at\",\n        \"td\".\"due_on\"                                                                             AS \"due_date\",\n        iff(\"td\".\"completed\" = '1', NULL, datediff(DAY, nullif(\"td\".\"due_on\", ''), current_date)) AS \"days_past_due\",\n        iff(\"days_past_due\" IS NULL OR \"days_past_due\" < 1, 'false', 'true')                      AS \"is_past_due\",\n        'https:\/\/app.asana.com\/0\/' || \"p\".\"project_id\" || '\/' || \"t\".\"id\"                         AS \"url\",\n        ifnull(\"u\".\"user\", 'Unknown')                                                             AS \"assignee\",\n        \"u\".\"user_type\"                                                                           AS \"assignee_type\",\n        iff(\"td\".\"completed\" = '1', 'true', 'false')                                              AS \"completed\",\n        iff(\"td\".\"parent_id\" = '', 'false', 'true')                                               AS \"is_subtask\"\n    FROM \"project\" \"p\"\n             INNER JOIN \"tasks\" \"t\"\n                        ON \"p\".\"project_id\" = \"t\".\"project_id\"\n             LEFT JOIN \"task_details\" \"td\"\n                       ON \"t\".\"id\" = \"td\".\"id\"\n             LEFT JOIN \"task_details_memberships\" \"tdm\"\n                       ON \"p\".\"project_id\" = \"tdm\".\"project_id\"\n                           AND \"t\".\"id\" = \"tdm\".\"task_details_pk\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"td\".\"assignee_id\" = \"u\".\"user_id\";",
                "-- table with custom task fields\n-- choose correct cvalue column based on type of the field\nCREATE TABLE \"out_task_custom_field\"\nAS\n    SELECT\n        \"id\"                                                    AS \"task_custom_field_id\",\n        \"task_details_pk\"                                       AS \"task_id\",\n        \"name\"                                                  AS \"task_custom_field\",\n        iff(\"type\" = 'enum', \"enum_value_name\", \"number_value\") AS \"task_custom_field_value\"\n    FROM \"task_details-custom_fields\";",
                "-- table with tags assigned to task\nCREATE TABLE \"out_task_tag\"\nAS\n    SELECT\n        \"ot\".\"task_id\" AS \"task_id\",\n        \"tdt\".\"name\"   AS \"tag\"\n    FROM \"out_task\" \"ot\"\n             INNER JOIN \"task_details_tags\" \"tdt\"\n                        ON \"ot\".\"task_id\" = \"tdt\".\"task_details_pk\";",
                "-- create N:M relation table describing user membership in tasks\nCREATE TABLE \"out_task_user\"\nAS\n    SELECT\n        \"tdf\".\"id\"     AS \"user_id\",\n        \"ot\".\"task_id\" AS \"task_id\"\n    FROM \"task_details_followers\" \"tdf\"\n             INNER JOIN \"out_task\" \"ot\"\n                        ON \"tdf\".\"task_details_pk\" = \"ot\".\"task_id\";",
                "-- table with task events\n-- trim text if it's too long\nCREATE TABLE \"out_task_event\"\nAS\n    SELECT\n        \"id\"                                                            AS \"task_event_id\",\n        \"task_id\",\n        ifnull(\"u\".\"user_id\", '0')                                      AS \"user_id\",\n        \"u\".\"user_type\",\n        ifnull(\"u\".\"user\", 'Unknown')                                   AS \"user\",\n        replace(left(\"created_at\", 19), 'T', ' ')                       AS \"created_at\",\n        \"type\"                                                          AS \"event_type\",\n        \"resource_subtype\"                                              AS \"event\",\n        iff(length(\"text\") > 1024, left(\"text\", 1021) || '...', \"text\") AS \"event_text\"\n    FROM \"task_stories\" \"ts\"\n             LEFT JOIN \"user\" \"u\"\n                       ON \"ts\".\"created_by_id\" = \"u\".\"user_id\";",
                "-- snapshot project table to be able to track progress in time\n-- this table is an auxiliary table which will be used for creating final snapshot table later on\n-- set timezone to UTC (change accordingly)\nALTER SESSION\n    SET TIMEZONE = 'UTC';",
                "CREATE TABLE \"out_task_snapshot\"\nAS\n    SELECT\n        current_date :: STRING AS \"snapshot_date\",\n        \"ot\".*\n    FROM \"out_task\" \"ot\";"
            ],
            "input": [
                {
                    "destination": "tasks",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTasks"
                    }
                },
                {
                    "destination": "task_details",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTaskDetails"
                    }
                },
                {
                    "destination": "task_details_followers",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTaskDetailsFollowers"
                    }
                },
                {
                    "destination": "task_details_tags",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTaskDetailsTags"
                    }
                },
                {
                    "destination": "project",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source": "out.c-projectManagementAsana.projectManagementProject"
                },
                {
                    "destination": "task_details_memberships",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTaskDetailsMemberships"
                    }
                },
                {
                    "destination": "sections",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaSections"
                    }
                },
                {
                    "destination": "task_details-custom_fields",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTaskDetailsCustomFields"
                    }
                },
                {
                    "destination": "task_stories",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source_search": {
                        "key": "bdm.scaffold.table.tag",
                        "value": "ProjectManagementAsana.internal.inLeochanExAsanaTaskStories"
                    }
                },
                {
                    "destination": "user",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source": "out.c-projectManagementAsana.projectManagementUser"
                }
            ],
            "name": "Task",
            "packages": [],
            "requires": [],
            "backend": "snowflake",
            "type": "simple",
            "phase": "2",
            "disabled": false
        },
        "description": "",
        "name": "Task"
    },
    {
        "configuration": {
            "output": [
                {
                    "source": "out_project_snapshot",
                    "primaryKey": [
                        "project_id",
                        "snapshot_date"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementProjectSnapshot"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementProjectSnapshot"
                },
                {
                    "source": "out_task_snapshot",
                    "primaryKey": [
                        "task_id",
                        "snapshot_date"
                    ],
                    "metadata": [
                        {
                            "key": "bdm.scaffold.table.tag",
                            "value": "ProjectManagementAsana.internal.outProjectManagementTaskSnapshot"
                        },
                        {
                            "key": "scaffold.id",
                            "value": "ProjectManagementAsana"
                        }
                    ],
                    "destination": "out.c-projectManagementAsana.projectManagementTaskSnapshot"
                }
            ],
            "queries": [
                "\/*PROJECT SNAPSHOTS*\/\n--create temporary table for additional calculations\n--add previous values of due date, owner and status, so we can define if there has been any change\n--don't snapshot already archived projects\nCREATE TABLE \"project_snapshot_tmp\"\nAS\n    SELECT\n        \"project_id\",\n        \"snapshot_date\",\n        nullif(\"due_date\", '')                                                                AS \"due_date\",\n        nullif(lag(\"due_date\") OVER (PARTITION BY \"project_id\" ORDER BY \"snapshot_date\"), '') AS \"previous_due_date\",\n        \"status\",\n        row_number() OVER (PARTITION BY \"project_id\",\"status\" ORDER BY \"snapshot_date\")       AS \"days_in_status\",\n        ifnull(lag(\"status\") OVER (PARTITION BY \"project_id\" ORDER BY \"snapshot_date\"), '')   AS \"previous_status\",\n        \"status_text\",\n        ifnull(lag(\"status_text\") OVER (PARTITION BY \"project_id\" ORDER BY \"snapshot_date\"),\n               '')                                                                            AS \"previous_status_text\",\n        \"owner\",\n        ifnull(lag(\"owner\") OVER (PARTITION BY \"project_id\" ORDER BY \"snapshot_date\"), '')    AS \"previous_owner\"\n    FROM \"project_snapshot\"\n    WHERE \"archived\" = 'false';",
                "--add partition column to tmp table for assigning number of day in the previous status and other possible calculations\n--marking last day of month\/quarter last snapshot for reporting\nCREATE TABLE \"project_snapshot_tmp2\"\nAS\n    SELECT\n        \"t\".*,\n        iff(\"m\".\"max_date\" IS NULL, 'false', 'true')                          AS \"last_snapshot\",\n        iff(\"lm\".\"project_id\" IS NULL, 'false', 'true')                       AS \"last_day_of_month\",\n        iff(\"lq\".\"project_id\" IS NULL, 'false', 'true')                       AS \"last_day_of_quarter\",\n        sum(CASE\n                WHEN \"t\".\"status\" = \"t\".\"previous_status\"\n                    THEN 0\n                ELSE 1\n            END)\n            OVER (PARTITION BY \"t\".\"project_id\" ORDER BY \"t\".\"snapshot_date\") AS \"continuous_status_partition\"\n    FROM \"project_snapshot_tmp\" \"t\"\n             LEFT JOIN (SELECT\n                            MAX(\"snapshot_date\") AS \"max_date\"\n                        FROM \"project_snapshot_tmp\") \"m\"\n                       ON \"t\".\"snapshot_date\" = \"m\".\"max_date\"\n             LEFT JOIN (SELECT\n                            \"s\".\"project_id\",\n                            \"s\".\"snapshot_date\"\n                        FROM \"project_snapshot_tmp\" \"s\"\n                                 LEFT JOIN (SELECT\n                                                max(\"snapshot_date\") AS \"max_date\"\n                                            FROM \"project_snapshot_tmp\") \"m\"\n                                           ON \"s\".\"snapshot_date\" = \"m\".\"max_date\"\n                        WHERE \"s\".\"snapshot_date\" = last_day(\"s\".\"snapshot_date\"::DATE)\n                           OR \"m\".\"max_date\" IS NOT NULL) AS \"lm\"\n                       ON \"t\".\"project_id\" = \"lm\".\"project_id\"\n                           AND \"t\".\"snapshot_date\" = \"lm\".\"snapshot_date\"\n             LEFT JOIN (SELECT\n                            \"s\".\"project_id\",\n                            \"s\".\"snapshot_date\"\n                        FROM \"project_snapshot_tmp\" \"s\"\n                                 LEFT JOIN (SELECT\n                                                max(\"snapshot_date\") AS \"max_date\"\n                                            FROM \"project_snapshot_tmp\") \"m\"\n                                           ON \"s\".\"snapshot_date\" = \"m\".\"max_date\"\n                        WHERE \"s\".\"snapshot_date\" = last_day(\"s\".\"snapshot_date\"::DATE, 'quarter')\n                           OR \"m\".\"max_date\" IS NOT NULL) \"lq\"\n                       ON \"t\".\"project_id\" = \"lq\".\"project_id\"\n                           AND \"t\".\"snapshot_date\" = \"lq\".\"snapshot_date\";",
                "--create project snapshot table\n--define if there has been change of status, owner or due date\n--adding number of days in previous stage\n--iff project is moved more than once to some status, it always assign number of all days in that previous particular status\nCREATE TABLE \"out_project_snapshot\"\nAS\n    SELECT\n        \"o\".\"project_id\",\n        \"o\".\"snapshot_date\",\n        \"o\".\"status\",\n        \"o\".\"status_text\",\n        \"o\".\"days_in_status\",\n        \"o\".\"previous_status\",\n        iff(\"o\".\"status\" <> \"o\".\"previous_status\", 'true', 'false')     AS \"status_change\",\n        \"d\".\"days_in_previous_status\",\n        \"o\".\"due_date\",\n        \"o\".\"previous_due_date\",\n        iff(\"o\".\"due_date\" <> \"o\".\"previous_due_date\", 'true', 'false') AS \"due_date_change\",\n        datediff(DAY, \"o\".\"previous_due_date\", \"o\".\"due_date\")          AS \"due_date_diff\",\n        \"o\".\"owner\",\n        \"o\".\"previous_owner\",\n        iff(\"o\".\"owner\" <> \"o\".\"previous_owner\", 'true', 'false')       AS \"owner_change\",\n        \"o\".\"last_snapshot\",\n        \"o\".\"last_day_of_month\",\n        \"o\".\"last_day_of_quarter\"\n    FROM \"project_snapshot_tmp2\" \"o\"\n             LEFT JOIN (SELECT\n                            \"project_id\",\n                            \"continuous_status_partition\",\n                            \"continuous_status_partition\" + 1 AS \"following_partition\",\n                            \"status\",\n                            max(\"days_in_status\")             AS \"days_in_previous_status\"\n                        FROM \"project_snapshot_tmp2\"\n                        GROUP BY 1, 2, 3, 4) \"d\"\n                       ON \"o\".\"project_id\" = \"d\".\"project_id\"\n                           AND \"o\".\"continuous_status_partition\" = \"d\".\"following_partition\";",
                "\/*TASK SNAPSHOTS*\/\n--create temporary table for additional calculations\n--add previous values of due date, assignee and section, so we can define if there has been any change\n--don't snapshot tasks of already archived projects (using inner join on project snapshot tmp table)\nCREATE TABLE \"task_snapshot_tmp\"\nAS\n    SELECT\n        \"ts\".\"task_id\",\n        \"ts\".\"snapshot_date\",\n        nullif(\"ts\".\"due_date\", '') AS \"due_date\",\n        nullif(lag(\"ts\".\"due_date\") OVER (PARTITION BY \"ts\".\"task_id\" ORDER BY \"ts\".\"snapshot_date\"),\n               '')                  AS \"previous_due_date\",\n        \"ts\".\"completed\",\n        ifnull(lag(\"ts\".\"completed\") OVER (PARTITION BY \"ts\".\"task_id\" ORDER BY \"ts\".\"snapshot_date\"),\n               '')                  AS \"previous_completed\",\n        \"ts\".\"section\",\n        ifnull(lag(\"ts\".\"section\") OVER (PARTITION BY \"ts\".\"task_id\" ORDER BY \"ts\".\"snapshot_date\"),\n               '')                  AS \"previous_section\",\n        \"ts\".\"assignee\",\n        ifnull(lag(\"ts\".\"assignee\") OVER (PARTITION BY \"ts\".\"task_id\" ORDER BY \"ts\".\"snapshot_date\"),\n               '')                  AS \"previous_assignee\"\n    FROM \"task_snapshot\" \"ts\"\n             INNER JOIN (SELECT DISTINCT\n                             \"project_id\"\n                         FROM \"project_snapshot_tmp\") \"ps\"\n                        ON \"ts\".\"project_id\" = \"ps\".\"project_id\";",
                "--marking last day of month\/quarter and last snapshot for reporting\nCREATE TABLE \"task_snapshot_tmp2\"\nAS\n    SELECT\n        \"t\".*,\n        iff(\"m\".\"max_date\" IS NULL, 'false', 'true') AS \"last_snapshot\",\n        iff(\"lm\".\"task_id\" IS NULL, 'false', 'true') AS \"last_day_of_month\",\n        iff(\"lq\".\"task_id\" IS NULL, 'false', 'true') AS \"last_day_of_quarter\"\n    FROM \"task_snapshot_tmp\" \"t\"\n             LEFT JOIN (SELECT\n                            MAX(\"snapshot_date\") AS \"max_date\"\n                        FROM \"task_snapshot_tmp\") \"m\"\n                       ON \"t\".\"snapshot_date\" = \"m\".\"max_date\"\n             LEFT JOIN (SELECT\n                            \"s\".\"task_id\",\n                            \"s\".\"snapshot_date\"\n                        FROM \"task_snapshot_tmp\" \"s\"\n                                 LEFT JOIN (SELECT\n                                                max(\"snapshot_date\") AS \"max_date\"\n                                            FROM \"task_snapshot_tmp\") \"m\"\n                                           ON \"s\".\"snapshot_date\" = \"m\".\"max_date\"\n                        WHERE \"s\".\"snapshot_date\" = last_day(\"s\".\"snapshot_date\"::DATE)\n                           OR \"m\".\"max_date\" IS NOT NULL) AS \"lm\"\n                       ON \"t\".\"task_id\" = \"lm\".\"task_id\"\n                           AND \"t\".\"snapshot_date\" = \"lm\".\"snapshot_date\"\n             LEFT JOIN (SELECT\n                            \"s\".\"task_id\",\n                            \"s\".\"snapshot_date\"\n                        FROM \"task_snapshot_tmp\" \"s\"\n                                 LEFT JOIN (SELECT\n                                                max(\"snapshot_date\") AS \"max_date\"\n                                            FROM \"task_snapshot_tmp\") \"m\"\n                                           ON \"s\".\"snapshot_date\" = \"m\".\"max_date\"\n                        WHERE \"s\".\"snapshot_date\" = last_day(\"s\".\"snapshot_date\"::DATE, 'quarter')\n                           OR \"m\".\"max_date\" IS NOT NULL) \"lq\"\n                       ON \"t\".\"task_id\" = \"lq\".\"task_id\"\n                           AND \"t\".\"snapshot_date\" = \"lq\".\"snapshot_date\";",
                "--create task snapshot table\n--define if there has been change of section, assignee or due date\nCREATE TABLE \"out_task_snapshot\"\nAS\n    SELECT\n        \"o\".\"task_id\",\n        \"o\".\"snapshot_date\",\n        \"o\".\"section\",\n        \"o\".\"previous_section\",\n        iff(\"o\".\"section\" <> \"o\".\"previous_section\", 'true', 'false')   AS \"section_change\",\n        \"o\".\"due_date\",\n        \"o\".\"previous_due_date\",\n        iff(\"o\".\"due_date\" <> \"o\".\"previous_due_date\", 'true', 'false') AS \"due_date_change\",\n        datediff(DAY, \"o\".\"previous_due_date\", \"o\".\"due_date\")          AS \"due_date_diff\",\n        \"o\".\"assignee\",\n        \"o\".\"previous_assignee\",\n        iff(\"o\".\"assignee\" <> \"o\".\"previous_assignee\", 'true', 'false') AS \"assignee_change\",\n        \"o\".\"last_snapshot\",\n        \"o\".\"last_day_of_month\",\n        \"o\".\"last_day_of_quarter\"\n    FROM \"task_snapshot_tmp2\" \"o\";"
            ],
            "input": [
                {
                    "destination": "project_snapshot",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source": "out.c-projectManagementAsana.auxiliaryTablesProjectSnapshot"
                },
                {
                    "destination": "task_snapshot",
                    "datatypes": [],
                    "whereColumn": "",
                    "whereValues": [],
                    "whereOperator": "eq",
                    "columns": [],
                    "loadType": "clone",
                    "source": "out.c-projectManagementAsana.auxiliaryTablesTaskSnapshot"
                }
            ],
            "name": "Snapshots",
            "packages": [],
            "requires": [],
            "backend": "snowflake",
            "type": "simple",
            "phase": "3",
            "disabled": false
        },
        "description": "",
        "name": "Snapshots"
    }
]
